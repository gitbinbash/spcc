To design and implement the Lexical Analyzer.
=======================================
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<ctype.h>
int isKeyword(char buffer[]){
char keywords[32][10] = {"auto","break","case","char","const","continue","default",
"do","double","else","enum","extern","float","for","goto",
"if","int","long","register","return","short","signed",
"sizeof","static","struct","switch","typedef","union",
"unsigned","void","volatile","while"};
int i, flag = 0;
for(i = 0; i < 32; ++i){
if(strcmp(keywords[i], buffer) == 0){
flag = 1;
break;
}
}
return flag;
}
int main(){
char ch, buffer[15], operators[] = "+-*/%=";
FILE *fp;
int i,j=0;
fp = fopen("code.txt","r");
if(fp == NULL){
printf("error while opening the file\n");
exit(0);
}
while((ch = fgetc(fp)) != EOF){
 for(i = 0; i < 6; ++i){
 if(ch == operators[i])
 printf("%c is operator\n", ch);
 }
 
 if(isalnum(ch)){
 buffer[j++] = ch;
 }
 else if((ch == ' ' || ch == '\n') && (j != 0)){
 buffer[j] = '\0';
 j = 0;
 
 if(isKeyword(buffer) == 1)
 printf("%s is keyword\n", buffer);
 else
 printf("%s is indentifier\n", buffer);
 }
 
}
fclose(fp);
return 0;
} 
======================================
code.txt:

int a = 5;
int b = 4;
int c;
c = b + a;
=========================

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

// This function checks if a given string is a keyword or not.
int isKeyword(char buffer[]) {
    // List of C keywords
    char keywords[32][10] = {"auto", "break", "case", "char", "const", "continue", "default",
                             "do", "double", "else", "enum", "extern", "float", "for", "goto",
                             "if", "int", "long", "register", "return", "short", "signed",
                             "sizeof", "static", "struct", "switch", "typedef", "union",
                             "unsigned", "void", "volatile", "while"};
    int i, flag = 0;
    for (i = 0; i < 32; ++i) {
        if (strcmp(keywords[i], buffer) == 0) {
            flag = 1;
            break;
        }
    }
    return flag;
}

int main() {
    char ch, buffer[15], operators[] = "+-*/%=";
    FILE *fp;
    int i, j = 0;

    // Open the input file
    fp = fopen("code.txt", "r");

    // Check if file was opened successfully
    if (fp == NULL) {
        printf("Error while opening the file\n");
        exit(0);
    }

    // Loop through the file one character at a time
    while ((ch = fgetc(fp)) != EOF) {
        // Check if the character is an operator
        for (i = 0; i < 6; ++i) {
            if (ch == operators[i])
                printf("%c is operator\n", ch);
        }

        // Check if the character is alphanumeric
        if (isalnum(ch)) {
            buffer[j++] = ch;
        }
        // If not alphanumeric, check if it's a space or newline
        else if ((ch == ' ' || ch == '\n') && (j != 0)) {
            // Add null terminator to the buffer
            buffer[j] = '\0';
            j = 0;

            // Check if the buffer is a keyword or an identifier
            if (isKeyword(buffer) == 1)
                printf("%s is keyword\n", buffer);
            else
                printf("%s is identifier\n", buffer);
        }
    }

    // Close the file
    fclose(fp);
    return 0;
}
